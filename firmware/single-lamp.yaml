substitutions:
  name: lamp-smartener
  friendly_name: "Lamp Smartener"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: True
  project:
    name: esphome.lamp_smartener
    version: "1.1"
  on_boot: 
    then:
      script.execute: update_status

esp32:
  board: esp32-c6-devkitm-1
  variant: ESP32C6
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  - platform: esphome

# This points to the public location of this yaml file.
dashboard_import:
  package_import_url: github://PaulBone/lamp-smartener/firmware/single-lamp.yaml
  import_full_config: false # or true


wifi:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # Not supported in zigbee configuration.
  ap:
    ssid: "Lamp-Smartener Fallback Hotspot"
    password: "Overengineered Light Switch"

  on_connect:
    - globals.set:
        id: wifi_connected
        value: 'true'
    - script.execute: update_status
  on_disconnect:
    - globals.set:
        id: wifi_connected
        value: 'false'
    - script.execute: update_status

# Not supported with zigbee   
captive_portal:

web_server:

script:
  - id: update_status
    mode: restart
    then:
      - if:
          condition:
            api.connected:
          then:
            light.turn_on:
              id: status
              brightness: 1.0
              red: 0
              green: 0
              blue: 1
          else:
          - if:
              condition: 
                lambda: |-
                  return id(wifi_connected);
              then:
                light.turn_on:
                  id: status
                  brightness: 1.0
                  red: 0
                  green: 1.0
                  blue: 0
              else:
                light.turn_on:
                  id: status
                  brightness: 1.0
                  red: 1.0
                  green: 0
                  blue: 0
      - delay: 60s
      - light.turn_off:
          id: status

    # The long press script prepares for factory reset if both buttons are held
    # for 10s.  Then executes it if they're still held for another 5.  We
    # need 3 scripts to correctly handle aborting a reset.
  - id: long_press
    mode: restart
    then:
      - delay: 10s
      - if:
          condition:
            lambda: |-
              return id(button_1).state && id(button_2).state;
          then:
            - globals.set:
                id: reset_in_progress 
                value: 'true'
            - light.turn_on:
                id: status
                brightness: 1.0
                red: 1.0
                green: 0.64
                blue: 0.0
            - light.turn_on:
                id: light_1 
                effect: alert
            - logger.log: "Preparing for factory reset in 5 seconds"
            - delay: 5s
            - if:
                condition:
                  lambda: |-
                    return id(button_1).state && id(button_2).state;
                then:
                  - logger.log: "Factory reset"
                  - button.press: my_factory_reset

  - id: long_press_start
    mode: restart
    then:
      script.execute: long_press
  - id: long_press_end
    mode: restart
    then:
      - if:
          condition:
            lambda: |-
              return id(reset_in_progress);
          then:
            - logger.log: "Factory reset aborted"
            - light.turn_off:
                id: status
            - light.turn_off:
                id: light_1
            - globals.set:
                id: reset_in_progress 
                value: 'false'
      - script.stop: long_press

globals:
  - id: wifi_connected
    type: bool
    initial_value: "false"
    restore_value: false
  - id: direct
    type: bool
    initial_value: "true"
    restore_value: false
  - id: reset_in_progress
    type: bool
    initial_value: "false"
    restore_value: false

button:
  - platform: factory_reset
    name: Factory reset
    id: my_factory_reset
    internal: true

output:
  - platform: ledc
    id: pwm_light
    # If you soldered R2, Q3, Q4 and J2 then use GPIO20,
    pin: GPIO20
    # NOTE: If you soldered R1, Q1, Q2 and J2 then use GPIO2, also check
    # which button is connected to which pin if you want the button over the
    # USB port to control it.
    # pin: GPIO0

light:
  - platform: esp32_rmt_led_strip
    id: status
    internal: true
    num_leds: 1
    pin: GPIO8
    rgb_order: GRB
    chipset: ws2812
    default_transition_length: 0s
  - platform: monochromatic
    output: pwm_light
    name: "Light"
    id: light_1
    effects:
      - pulse:
          name: Notification
          transition_length: 1.5s
          update_interval: 1.5s
          min_brightness: 10%
          max_brightness: 100%
      - pulse:
          name: Alert
          transition_length:
            on_length: 0s
            off_length: 0.5s
          update_interval: 0.4s
          min_brightness: 0%
          max_brightness: 100%
      - flicker:
          name: Flicker
          intensity: 2.5%
          alpha: 97.5%

binary_sensor:
  - platform: gpio
    name: "Button 1"
    id: button_1
    pin:
      # NOTE: if you switched the pin for the LED above you may also want to
      # swap this to GPIO3
      number: GPIO14
      mode:
        input: true
        pullup: true
      inverted: true
    on_press:
      then:
        script.execute: long_press_start
    on_release:
      then:
        script.execute: long_press_end
    on_click:
      then:
        - if:
            condition:
              - or:
                - lambda: return id(direct);
                - not:
                    api.connected: 
            then:
              - light.toggle: light_1
  - platform: gpio
    name: "Button 2"
    id: button_2
    pin:
      # NOTE: if you switched the pin for the LED above you may also want to
      # swap this to GPIO14
      number: GPIO3
      mode:
        input: true
        pullup: true
      inverted: true
    on_press:
      then:
        script.execute: long_press_start
    on_release:
      then:
        script.execute: long_press_end

switch:
  - name: Direct Control
    icon: mdi:cog
    entity_category: CONFIG
    platform: template
    restore_mode: RESTORE_DEFAULT_ON
    lambda: return id(direct);
    turn_on_action:
      then:
        - globals.set:
            id: direct
            value: 'true'
    turn_off_action: 
      then:
        - globals.set: 
            id: direct
            value: 'false'

